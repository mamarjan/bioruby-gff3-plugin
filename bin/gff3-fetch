#! /usr/bin/ruby
#
# Author:: Pjotr Prins
# Copyright:: August 2010
# License:: Ruby License
#
# Copyright (C) 2010,2011 Pjotr Prins <pjotr.prins@thebird.nl>

USAGE = <<EOM
  Fetch and assemble GFF3 types, e.g. mRNAs, CDS, and print in FASTA format. 

    gff3-fetch [--low-mem] type [filename.fa] filename.gff

  Where:

		--no-assemble   : output each record as a sequence
		--add-phase     : output records using phase (useful w. CDS to AA)
		--translate     : output as amino acid sequence -- NYI
	
	type is any valid type in the GFF3 definition. For example:

    gene            : list genes -- NYI
    mRNA            : assemble mRNA
    CDS             : assemble CDS 

  and the following performance options:

		--low-mem       : use LRU cache (limit RAM use, fast) -- NYI
    --no-cache      : do not load anything in memory (slow)
    --max-cpus num  : use num threads -- NYI

  Multiple GFF3 files can be used. With external FASTA files, always the last
  one before the GFF3 filename is matched.

  Examples:

    Assemble mRNA and CDS information from test.gff3 (which includes sequence information)

      gff3-fetch mRNA test/data/gff/test.gff3
      gff3-fetch CDS test/data/gff/test.gff3

    Find CDS records from external FASTA file, adding phase and translate to protein sequence

      gff3-fetch --no-assemble --add-phase --translate CDS test/data/gff/MhA1_Contig1133.fa test/data/gff/MhA1_Contig1133.gff3

    Find mRNA from external FASTA file, without loading everything in RAM

      gff3-fetch --low-mem mRNA test/data/gff/test-ext-fasta.fa test/data/gff/test-ext-fasta.gff3   
      gff3-fetch --no-cache mRNA test/data/gff/test-ext-fasta.fa test/data/gff/test-ext-fasta.gff3   

    Find GENEID predicted terminal exons

      gff3-fetch terminal chromosome1.fa geneid.gff3

  If you use this software, please cite http://dx.doi.org/10.1093/bioinformatics/btq475

== Copyright

Copyright (C) 2010,2011 Pjotr Prins <pjotr.prins@thebird.nl> 

EOM

SEP = File::SEPARATOR
rootpath = File.dirname(File.dirname(__FILE__))+SEP
$: << rootpath+'lib'
GFF3_VERSION = File.new(rootpath+'VERSION').read.chomp

require 'bio-gff3'

$stderr.print "BioRuby GFF3 Plugin "+GFF3_VERSION+" Copyright (C) 2010,2011 Pjotr Prins <pjotr.prins@thebird.nl>\n\n"

if ARGV.size == 0
  print USAGE
end

gfftype = ARGV.shift
caching = true
if gfftype == "--no-cache"
  caching = false
  gfftype = ARGV.shift
end
raise "Unknown GFF type '#{gfftype}'" if gfftype !~ /mrna|cds|exon/i

fastafn = nil

ARGV.each do | fn |
  if File.extname(fn) =~ /fa|fas|fasta/i
    fastafn = fn
    next
  end
  options = {:validate => false}
  options = {:validate => false, :cache_components => :cache_none, :cache_records => :cache_none} if caching == false
  options[:fasta_filename] = fastafn if fastafn

  gffdb = Bio::GFFbrowser::GFFdb.new(fn,options)
  gff = gffdb.assembler
  case gfftype.downcase
    when 'mrna' 
          gff.each_mRNA_seq do | id, seq |
            puts ">"+id
            puts seq
          end
    when 'exon'
          gff.each_exon_seq do | id, seq |
            puts ">"+id
            puts seq
          end
    when 'cds'
          gff.each_CDS_seq do | id, seq |
            puts ">"+id
            puts seq
          end
    else
      raise "Unknown action <#{gfftype}>"
  end
end



