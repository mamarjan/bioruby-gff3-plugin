#! /usr/bin/ruby
#
# Author:: Pjotr Prins
# Copyright:: August 2010
# License:: Ruby License
#
# Copyright (C) 2010,2011 Pjotr Prins <pjotr.prins@thebird.nl>

USAGE = <<EOM
  Fetch and assemble GFF3 types (e.g. ORF, mRNA, CDS) and print in FASTA format. 

    gff3-fetch [--low-mem] [--validate] type [filename.fa] filename.gff

  Where (NYI == Not Yet Implemented):

		--validate      : validate GFF3 file by translating frames 
		--no-assemble   : output each record as a sequence -- NYI
		--add-phase     : output records using phase (useful w. CDS to AA) --NYI
		--translate     : output as amino acid sequence -- NYI
    --fix           : check 3-frame translation and fix, if possible -- NYI
	
	type is any valid type in the GFF3 definition. For example:

    mRNA            : assemble mRNA
    CDS             : assemble CDS 
    gene/ORF        : list gene ORFs -- NYI
		other           : use any type from GFF3 definition, e.g. 'Terminate' -- NYI

  and the following performance options:

    --no-cache      : do not load anything in memory (slow)
		--low-mem       : use LRU cache (limit RAM use, fast) -- NYI
    --max-cpus num  : use num threads -- NYI
		--emboss        : use EMBOSS translation (fast) -- NYI

  Multiple GFF3 files can be used. With external FASTA files, always the last
  one before the GFF3 filename is matched.

	Note that above switches are only partially implemented at this stage. Full
	feature support is projected Feb. 2011.

  Examples:

    Assemble mRNA and CDS information from test.gff3 (which includes sequence information)

      gff3-fetch mRNA test/data/gff/test.gff3
      gff3-fetch CDS test/data/gff/test.gff3

    Find CDS records from external FASTA file, adding phase and translate to protein sequence

      gff3-fetch --no-assemble --add-phase --translate CDS test/data/gff/MhA1_Contig1133.fa test/data/gff/MhA1_Contig1133.gff3

    Find mRNA from external FASTA file, without loading everything in RAM

      gff3-fetch --low-mem mRNA test/data/gff/test-ext-fasta.fa test/data/gff/test-ext-fasta.gff3   
      gff3-fetch --no-cache mRNA test/data/gff/test-ext-fasta.fa test/data/gff/test-ext-fasta.gff3   

    Validate GFF3 file using EMBOSS translation

      gff3-fetch --low-mem --validate --emboss mRNA test/data/gff/test-ext-fasta.fa test/data/gff/test-ext-fasta.gff3   

    Find GENEID predicted terminal exons

      gff3-fetch terminal chromosome1.fa geneid.gff3

  If you use this software, please cite http://dx.doi.org/10.1093/bioinformatics/btq475

== Performance

time gff3-fetch cds m_hapla.WS217.dna.fa m_hapla.WS217.gff3 > test.fa

           real     user     sys             
In RAM     12m41s   12m28s   0m9s  (0.8.0 Jan. 2011)
--no-cache                         (0.8.0 Jan. 2011)

time gff3-fetch --no-cache CDS m_hapla.WS217.dna.fa m_hapla.WS217.gff3 > test.fa

where

   52M m_hapla.WS217.dna.fa
  456M m_hapla.WS217.gff3

ruby 1.9.2p136 (2010-12-25 revision 30365) [x86_64-linux]

on a 8 CPU, 2.6 GHz (6MB cache), 16 GB RAM machine. 

== Copyright

Copyright (C) 2010,2011 Pjotr Prins <pjotr.prins@thebird.nl> 

EOM

SEP = File::SEPARATOR
rootpath = File.dirname(File.dirname(__FILE__))+SEP
$: << rootpath+'lib'
GFF3_VERSION = File.new(rootpath+'VERSION').read.chomp

require 'bio-gff3'

$stderr.print "BioRuby GFF3 Plugin "+GFF3_VERSION+" Copyright (C) 2010,2011 Pjotr Prins <pjotr.prins@thebird.nl>\n\n"

if ARGV.size == 0
  print USAGE
end

gfftype = ARGV.shift
caching = true
if gfftype == "--no-cache"
  caching = false
  gfftype = ARGV.shift
end
raise "Unknown GFF type '#{gfftype}'" if gfftype !~ /mrna|cds|exon/i

fastafn = nil

ARGV.each do | fn |
  if File.extname(fn) =~ /fa|fas|fasta/i
    fastafn = fn
    next
  end
  options = {:validate => false}
  options = {:validate => false, :cache_components => :cache_none, :cache_records => :cache_none} if caching == false
  options[:fasta_filename] = fastafn if fastafn

  gffdb = Bio::GFFbrowser::GFFdb.new(fn,options)
  gff = gffdb.assembler
  case gfftype.downcase
    when 'mrna' 
          gff.each_mRNA_seq do | id, seq |
            puts ">"+id
            puts seq
          end
    when 'exon'
          gff.each_exon_seq do | id, seq |
            puts ">"+id
            puts seq
          end
    when 'cds'
          gff.each_CDS_seq do | id, seq |
            puts ">"+id
            puts seq
          end
    else
      raise "Unknown action <#{gfftype}>"
  end
end



